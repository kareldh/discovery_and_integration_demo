{"version":3,"sources":["components/TileView.js","data/const.js","data/api.js","components/ApiContainer.js","App.js","serviceWorker.js","index.js"],"names":["TileView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","zoom","state","data","lat","lng","newProps","setState","position","react_default","a","createElement","Map","style","height","center","TileLayer","attribution","url","React","Component","DATASET_URL","fetchRoutableTile","z","x","y","Promise","resolve","ldfetch","headers","accept","get","then","response","ApiContainer","init","bind","assertThisInitialized","mode","_this2","undefined","triples","intersections","added","already_found","nodeListStarts","forEach","element","subject","predicate","object","exec","value","id","getLatLng","console","log","_this3","markers","i","key","hasOwnProperty","push","Marker","Popup","href","TileView_TileView","onClick","Input","placeholder","onChange","e","App","ApiContainer_ApiContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a05d3b96.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Map, TileLayer} from 'react-leaflet';\r\n\r\n\r\nexport default class TileView extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.zoom = props.zoom;\r\n        this.state = {\r\n            data: props.data,\r\n            lat: props.lat,\r\n            lng: props.lng\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        this.setState({data: newProps.data, lat: newProps.lat, lng: newProps.lng})\r\n    }\r\n\r\n    render() {\r\n        const position = [this.state.lat, this.state.lng];\r\n        const zoom = this.zoom;\r\n        const {data} = this.state;\r\n        return (\r\n            <Map\r\n                style = {{height: '850px'}}\r\n                center = {position}\r\n                zoom = {zoom}\r\n            >\r\n                <\r\n                    TileLayer\r\n                    attribution = '&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {data}\r\n            </Map>\r\n        )\r\n    }\r\n}","export let DATASET_URL = 'https://tiles.openplanner.team/planet/';","import ldfetch from 'ldfetch';\r\nimport {DATASET_URL} from \"./const\";\r\n\r\nexport function fetchRoutableTile(z,x,y){\r\n    return new Promise((resolve) => {\r\n        let fetch = new ldfetch({headers: {accept: 'application/ld+json'}});\r\n        fetch.get(DATASET_URL+z+\"/\"+x+\"/\"+y).then(\r\n            response => {resolve(response)}\r\n        )\r\n    });\r\n}\r\n\r\n\r\n/*\r\nGaat er van uit dat arrays van nodes bij het veld osm:nodes na elkaar volgen en niet random verspreid zijn over de lijst met triples.\r\nGaat er van uit dat array na het vermelden van array komt\r\nop die manier kan het vinden van de node URI's op intersections van Ways in 1 run door de triples\r\n */\r\nexport function getIntersectionNodes(triples){\r\n    return new Promise((resolve)=>{\r\n        let intersections = {};\r\n        let added = {};\r\n        let already_found = {};\r\n\r\n        let nodeListStarts = {};\r\n\r\n        triples.forEach(function(element){\r\n            if(element.subject && element.predicate && element.object){\r\n                let found = /http:\\/\\/www\\.openstreetmap\\.org\\/way\\/\\d*/g.exec(element.subject.value);\r\n                if(found && element.predicate.value === \"https://w3id.org/openstreetmap/terms#nodes\"){\r\n                    // console.log(element);\r\n                    nodeListStarts[element.object.value] = true;\r\n                }\r\n                else if(nodeListStarts[element.subject.value]){\r\n                    if(element.predicate.value === \"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"){\r\n                        // console.log(element.object.value);\r\n\r\n                        if(already_found[element.object.value] && !added[element.object.value]){\r\n                            intersections[element.object.value] = {id: element.object.value, lat: undefined, lng: undefined};\r\n                            added[element.object.value] = true;\r\n                        }\r\n                        else{\r\n                            // console.log(element.object.value);\r\n                            already_found[element.object.value] = true;\r\n                        }\r\n                    }\r\n                    else if(element.predicate.value === \"http://www.w3.org/1999/02/22-rdf-syntax-ns#rest\" && element.object.value !== \"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil\"){\r\n                        nodeListStarts[element.object.value] = true;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        // voor elke node nog zijn lat en long bepalen\r\n        getLatLng(triples,intersections);\r\n\r\n        resolve(intersections);\r\n    });\r\n}\r\n\r\n/*\r\nGaat er van uit de lat en long triples van een node voor de highway triple komt\r\n */\r\nexport function getNodesWithTrafficSignals(triples){\r\n    return new Promise((resolve)=>{\r\n        let intersections = {};\r\n        let lat = undefined;\r\n        let lng = undefined;\r\n\r\n        triples.forEach(function(element){\r\n            if(element.subject && element.predicate && element.object){\r\n                if(element.predicate.value === \"http://www.w3.org/2003/01/geo/wgs84_pos#lat\"){\r\n                    lat = element.object.value;\r\n                }\r\n                else if(element.predicate.value === \"http://www.w3.org/2003/01/geo/wgs84_pos#long\"){\r\n                    lng = element.object.value;\r\n                }\r\n                else if(element.predicate.value === \"https://w3id.org/openstreetmap/terms#highway\" && element.object.value === \"osm:traffic_signals\"){\r\n                    intersections[element.subject.value] = {id: element.object.value, lat: lat, lng: lng};\r\n                    if(!lat || !lng){\r\n                        console.log(\"lat of lng zijn undefined\")\r\n                    }\r\n                    lat = undefined;\r\n                    lng = undefined;\r\n                }\r\n            }\r\n        });\r\n\r\n        resolve(intersections);\r\n    });\r\n}\r\n\r\nfunction getLatLng(triples,intersections){\r\n    triples.forEach(function(element){\r\n        if(element.subject && element.predicate && element.object){\r\n            if(intersections[element.subject.value]){\r\n                if(element.predicate.value === \"http://www.w3.org/2003/01/geo/wgs84_pos#lat\"){\r\n                    intersections[element.subject.value].lat = element.object.value;\r\n                }\r\n                else if(element.predicate.value === \"http://www.w3.org/2003/01/geo/wgs84_pos#long\"){\r\n                    intersections[element.subject.value].lng = element.object.value;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport TileView from \"./TileView\";\r\nimport {fetchRoutableTile, getIntersectionNodes, getNodesWithTrafficSignals} from \"../data/api\";\r\nimport {Marker, Popup} from \"react-leaflet\";\r\nimport {Input} from \"semantic-ui-react\";\r\n\r\nexport default class ApiContainer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.init = this.init.bind(this);\r\n        this.state = {\r\n            data: {}\r\n        };\r\n        this.x = 8392;\r\n        this.y = 5469;\r\n        this.init(0,this.x,this.y);\r\n    }\r\n\r\n    init(mode,x,y){\r\n        if(x === undefined || y === undefined){\r\n            x = 8392;\r\n            y = 5469;\r\n        }\r\n        if(mode === 0){\r\n            fetchRoutableTile(14,x,y).then((data)=>{getIntersectionNodes(data.triples).then((intersections)=>{this.setState({data: intersections})})});\r\n        }\r\n        else if(mode === 1){\r\n            fetchRoutableTile(14,x,y).then((data)=>{getNodesWithTrafficSignals(data.triples).then((intersections)=>{this.setState({data: intersections})})});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let {data} = this.state;\r\n        let markers = [];\r\n        let i = 0;\r\n        let lat = 51.21205;\r\n        let lng = 4.39717;\r\n        for (let key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                markers.push(\r\n                    <Marker key={data[key].id+\"_\"+i} position={[data[key].lat,data[key].lng]}>\r\n                        <Popup>\r\n                            <a href={data[key].id}>{data[key].id}</a>\r\n                        </Popup>\r\n                    </Marker>);\r\n                if(i===0){\r\n                    lat = data[key].lat;\r\n                    lng = data[key].lng;\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n\r\n        return <div>\r\n            <div>\r\n                <TileView zoom={14} lat={lat} lng={lng} data={markers}/>\r\n        </div>\r\n            <button onClick={()=>{this.init(0,this.x,this.y)}}>Common Nodes between Ways</button>\r\n            <button onClick={()=>{this.init(1,this.x,this.y)}}>Highway:traffic_signals Nodes</button>\r\n            current tile x value: {this.x}   current tile y value: {this.y}\r\n            <Input placeholder=\"tile x value\" onChange={(e,data)=>{this.x = data.value}}/>\r\n            <Input placeholder=\"tile y value\" onChange={(e,data)=>{this.y = data.value}}/>\r\n        </div>;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport ApiContainer from \"./components/ApiContainer\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ApiContainer/>\r\n            <div>\r\n        </div>\r\n        </div>\r\n    )\r\n        ;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n        if (isLocalhost) {\r\n            // This is running on localhost. Let's check if a service worker still exists or not.\r\n            checkValidServiceWorker(swUrl, config);\r\n\r\n            // Add some additional logging to localhost, pointing developers to the\r\n            // service worker/PWA documentation.\r\n            navigator.serviceWorker.ready.then(() => {\r\n                console.log(\r\n                'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n            );\r\n        })\r\n            ;\r\n        } else {\r\n            // Is not localhost. Just register service worker\r\n            registerValidSW(swUrl, config);\r\n        }\r\n    })\r\n        ;\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n        registration.onupdatefound = () =>\r\n    {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n            return;\r\n        }\r\n        installingWorker.onstatechange = () =>\r\n        {\r\n            if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                    // At this point, the updated precached content has been fetched,\r\n                    // but the previous service worker will still serve the older\r\n                    // content until all client tabs are closed.\r\n                    console.log(\r\n                        'New content is available and will be used when all ' +\r\n                        'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                    );\r\n\r\n                    // Execute callback\r\n                    if (config && config.onUpdate) {\r\n                        config.onUpdate(registration);\r\n                    }\r\n                } else {\r\n                    // At this point, everything has been precached.\r\n                    // It's the perfect time to display a\r\n                    // \"Content is cached for offline use.\" message.\r\n                    console.log('Content is cached for offline use.');\r\n\r\n                    // Execute callback\r\n                    if (config && config.onSuccess) {\r\n                        config.onSuccess(registration);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ;\r\n    }\r\n    ;\r\n}).catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n})\r\n    ;\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl).then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n    if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n    ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n            window.location.reload();\r\n    })\r\n        ;\r\n    })\r\n        ;\r\n    } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n    }\r\n}).catch(() => {\r\n        console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n    );\r\n})\r\n    ;\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n    })\r\n        ;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < App />, document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}